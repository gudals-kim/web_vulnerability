package sec.web.service;

import com.zaxxer.hikari.HikariDataSource;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import sec.web.controller.member.form.AddMemberForm;
import sec.web.controller.member.form.ChargeCashForm;
import sec.web.controller.member.form.FindMemberForm;
import sec.web.controller.member.form.PasswordSetForm;
import sec.web.domain.member.Member;
import sec.web.domain.member.MemberRepository;

import javax.sql.DataSource;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;
import static sec.web.dbconnection.ConnectionConst.*;

@SpringBootTest
class MemberServiceTest {
    @Autowired
    private MemberRepository memberRepository;
    @Autowired
    private MemberService memberService;
    @AfterEach
    void afterEach(){
        memberRepository.reset();
        Member testMember = new Member("test","test@test.com","!@#123qweQWE");
        Member test2Member = new Member("test2","test2@test.com","!@#123qweQWE");
        memberRepository.save(testMember);
        memberRepository.save(test2Member);
    }
    @BeforeEach
    void beforeEach(){
        HikariDataSource dataSource = new HikariDataSource();
        dataSource.setJdbcUrl(URL);
        dataSource.setUsername(USERNAME);
        dataSource.setPassword(PASSWORD);

        memberRepository = new MemberRepository(dataSource);
    }

    @Test
    @DisplayName("충전서비스 테스트")
    void chargeCash() {
        Member member = new Member("chargeCash","chargeCash@cash.com","chargeCash");
        ChargeCashForm formData = new ChargeCashForm();
        member.setMoney(5000);
        formData.setMoney(5000);
        Member chargeMember = memberService.chargeCash(member, formData);
        assertThat(chargeMember.getMoney()).isEqualTo(10000);
    }

    @Test
    @DisplayName("패스워드 인증 성공 테스트 ")
    void isPasswordEqual() {
        AddMemberForm addMemberFormData = new AddMemberForm();
        addMemberFormData.setPassword("TestP@ssword");
        addMemberFormData.setConfirmPassword("TestP@ssword");
        assertThat(memberService.isPasswordEqual(addMemberFormData)).isTrue();
    }
    @Test
    @DisplayName("패스워드 인증 실패 테스트")
    void isPasswordEqual_Fail() {
        PasswordSetForm passwordSetForm = new PasswordSetForm();
        passwordSetForm.setPassword("TestP@ssword");
        passwordSetForm.setConfirmPassword("failfailFailFai!");
        assertThat(memberService.isPasswordEqual(passwordSetForm)).isFalse();
    }
    @Test
    @DisplayName("패스워드 변경 성공 테스트")
    void passwordChange() {
        PasswordSetForm passwordSetForm = new PasswordSetForm();
        passwordSetForm.setPassword("failfailFailFai!");
        passwordSetForm.setConfirmPassword("failfailFailFai!");
        memberService.passwordChange(passwordSetForm,1L);
        Member member = memberRepository.find(1L);
        assertThat(member.getPassword()).isEqualTo("failfailFailFai!");
    }
    @Test
    @DisplayName("회원 인증 성공 테스트")
    void isMember(){
        FindMemberForm findMemberForm = new FindMemberForm();
        findMemberForm.setEmail("test@test.com");
        findMemberForm.setName("test");
        Member member = memberRepository.find("test@test.com");
        assertThat(memberService.isMember(findMemberForm,member)).isTrue();
    }
    @Test
    @DisplayName("회원 인증 실패 테스트")
    void isMember_fail(){
        FindMemberForm findMemberForm = new FindMemberForm();
        findMemberForm.setEmail("test@test.com");
        findMemberForm.setName("fail");
        Member member = memberRepository.find("test@test.com");
        assertThat(memberService.isMember(findMemberForm,member)).isFalse();
    }
}