package sec.web.controller.item;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import sec.web.controller.item.form.AddItemForm;
import sec.web.domain.item.Item;
import sec.web.domain.item.ItemRepository;
import sec.web.domain.member.Member;
import sec.web.domain.member.MemberRepository;
import sec.web.domain.review.ReviewRepository;
import sec.web.session.SessionConst;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.List;

@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/item")
public class ItemController {
    private final ItemRepository itemRepository;
    private final MemberRepository memberRepository;
    private final ReviewRepository reviewRepository;
    @GetMapping("/items/{memberId}")
    public String registeredItems(@PathVariable Long memberId, Model model){
        List<Item> registerItems = itemRepository.findBySellerId(memberId);
        if (registerItems==null){
            //등록 상품이 없을때 처리
            return "redirect:/";
        }
        model.addAttribute("registerItems",registerItems);
        return "item/registerItems";
    }
    @GetMapping("/{memberId}/{itemId}/edit")
    public String editItem(@ModelAttribute("addItemForm") AddItemForm addItemForm,
                           @PathVariable Long memberId,
                           @PathVariable Long itemId,
                           Model model){
        Item item = itemRepository.find(itemId);
        addItemForm.setItemName(item.getName());
        addItemForm.setPrice(item.getPrice());
        addItemForm.setQuantity(item.getQuantity());
        addItemForm.setDescription(item.getDescription());
        model.addAttribute("addItemForm",addItemForm);
        return "item/itemEdit";
    }
    @PostMapping("/{memberId}/{itemId}/edit")
    public String editItem(@ModelAttribute("addItemForm") AddItemForm addItemForm,
                           BindingResult bindingResult,
                           @PathVariable Long itemId,
                           @PathVariable Long memberId){
        if (bindingResult.hasErrors()){
            return "item/itemEdit";
        }

        Item updateItem = itemRepository.find(itemId);
        updateItem.setName(addItemForm.getItemName());
        updateItem.setPrice(addItemForm.getPrice());
        updateItem.setQuantity(addItemForm.getQuantity());
        updateItem.setDescription(addItemForm.getDescription());
        itemRepository.update(updateItem);
        return "redirect:/item/items/{memberId}";
    }
    @GetMapping("/items/{memberId}/add")
    public String addItem(@ModelAttribute("addItemForm") AddItemForm addItemForm,
                          @PathVariable Long memberId){
        return "item/itemAdd";
    }
    @PostMapping("/items/{memberId}/add")
    public String addItem(@ModelAttribute("addItemForm") AddItemForm addItemForm,
                          BindingResult bindingResult,
                          @PathVariable Long memberId){
        if (bindingResult.hasErrors()){
            return "item/itemAdd";
        }
        if (itemRepository.findByItemName(addItemForm.getItemName())!=null){
            bindingResult.rejectValue("itemName","itemName","중복된 상품명이 있습니다. 다른 상품명을 등록하십시오");
            return "item/itemAdd";
        }
        Item addItem = new Item(memberId,
                addItemForm.getItemName(),
                addItemForm.getPrice(),
                addItemForm.getQuantity(),
                addItemForm.getDescription());
        itemRepository.save(addItem);
        return "redirect:/item/items/{memberId}";
    }

    @GetMapping("/{itemId}")
    public String item(@PathVariable Long itemId, Model model, HttpServletRequest request){
        Item item = itemRepository.find(itemId);
        //세션이 있으면 있는 세션반환, 없으면 신규 세션 생성
        HttpSession session = request.getSession();
        //세션에 로그인 회원 정보 보관
        Member member = (Member)session.getAttribute(SessionConst.LOGIN_MEMBER);
        log.info("member={}",member);
        model.addAttribute("member",member);
        model.addAttribute("item",item);
        return "item/item";
    }
    @GetMapping("/shoplist/{memberId}")
    public String shopList(@PathVariable Long memberId, Model model){
        List<Item> shopList = reviewRepository.findByMemberId(memberId);
        if (shopList==null){
            return "redirect:/";
        }
        model.addAttribute("shopList",shopList);
        return "item/purchaseList";
    }
}
