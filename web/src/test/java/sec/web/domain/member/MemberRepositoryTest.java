package sec.web.domain.member;

import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.SQLExceptionOverride;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import sec.web.dbconnection.ConnectionConst;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import java.sql.SQLException;
import java.util.Set;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;
import static sec.web.dbconnection.ConnectionConst.*;

@SpringBootTest
class MemberRepositoryTest {
    MemberRepository repository;
    @AfterEach
    void afterEach(){
        repository.reset();
    }

    @BeforeEach
    void beforeEach(){
        HikariDataSource dataSource = new HikariDataSource();
        dataSource.setJdbcUrl(URL);
        dataSource.setUsername(USERNAME);
        dataSource.setPassword(PASSWORD);

        repository = new MemberRepository(dataSource);
    }

    @Test
    @DisplayName("CRUD TEST 성공테스트")
    void crudTest_success() {

        //save
        Member testMember = new Member("test","test@test.com","123!@#qweQWE");
        Member test2Member = new Member("test2","test2@test.com","123!@#qweQWE");
        repository.save(testMember);
        repository.save(test2Member);

        //find
        System.out.println("findTest Start");
        Member findMember = repository.find(testMember.getEmail());
        Member updateMember = repository.find(test2Member.getEmail());
        assertThat(findMember.getName()).isEqualTo(testMember.getName());
        assertThat(updateMember.getEmail()).isEqualTo(test2Member.getEmail());
        System.out.println("findTest end");

        //update
        System.out.println("updateTest Start");
        updateMember.setName("updateTest");
        repository.update(updateMember);
        Member updateMemberFind = repository.find(updateMember.getId());
        assertThat(updateMemberFind.getName()).isEqualTo("updateTest");
        System.out.println("updateTest end");

        //update money
        System.out.println("updateMoneyTest Start");
        updateMemberFind.setMoney(10000);
        repository.updateMoney(updateMemberFind);
        Member updateMemberMoneyFind = repository.find(updateMember.getId());
        assertThat(updateMemberMoneyFind.getMoney()).isEqualTo(10000);
        System.out.println("updateMoneyTest end");

        //delete
        System.out.println("deleteTest Start");
        repository.delete(findMember.getId());
        assertThat(repository.find(findMember.getId()))
                .isNull();
        System.out.println("deleteTest end");
    }
    @Test
    @DisplayName("존재하지 않는 회원 조회 테스트")
    void findTest_Fail() {
        //find
        System.out.println("findTest Start");
        assertThat(repository.find("failTest@fail.com")).isNull();
        System.out.println("findTest end");
    }

}