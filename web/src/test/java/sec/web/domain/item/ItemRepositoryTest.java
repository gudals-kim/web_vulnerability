package sec.web.domain.item;

import com.zaxxer.hikari.HikariDataSource;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import sec.web.domain.member.MemberRepository;

import java.util.List;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;
import static sec.web.dbconnection.ConnectionConst.*;

class ItemRepositoryTest {
    ItemRepository itemRepository;

    @BeforeEach
    void beforeEach(){
        HikariDataSource dataSource = new HikariDataSource();
        dataSource.setJdbcUrl(URL);
        dataSource.setUsername(USERNAME);
        dataSource.setPassword(PASSWORD);

        itemRepository = new ItemRepository(dataSource);
    }
    @Test
    void CRUD_TEST(){
        Item itemTest = new Item(3L, "itemTest1", 150, 10, "item1 description 테스트 중입니다.");
        Item itemTest1 = new Item(7L, "itemTest2", 65150, 33, "item2 description 테스트 중입니다.");
        Item itemTest2 = new Item(7L, "itemTest3", 26250, 55, "item3 description 테스트 중입니다.");
        Item itemTest3 = new Item(7L, "itemTest4", 51650, 4, "item4 description 테스트 중입니다.");
        //save
        itemRepository.save(itemTest);
        itemRepository.save(itemTest1);
        itemRepository.save(itemTest2);
        itemRepository.save(itemTest3);
        //find
        Item findItem = itemRepository.find(1L);
        Item findItem2 = itemRepository.find(2L);
        assertThat(findItem.getDescription()).isEqualTo(itemTest.getDescription());
        //find all
        List<Item> itemList = itemRepository.findAll();
        assertThat(itemList.size()).isEqualTo(4);
        //findByMemberId
        List<Item> itemByMemberList = itemRepository.findByMemberId(7L);
        assertThat(itemByMemberList.size()).isEqualTo(3);
        assertThat(itemByMemberList).contains(findItem2);
        //delete
        itemRepository.delete(1L);
        itemList = itemRepository.findAll();
        assertThat(itemList.size()).isEqualTo(3);
        assertThat(itemList).doesNotContain(findItem);
        //deleteByMemberId
        itemRepository.deleteByMemberId(7L);
        itemByMemberList = itemRepository.findByMemberId(7L);
        assertThat(itemByMemberList).isNull();
    }

}