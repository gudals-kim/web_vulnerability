package sec.web.domain.basket;
import lombok.extern.slf4j.Slf4j;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.stereotype.Repository;
import sec.web.domain.item.Item;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static sec.web.dbconnection.DBConnectionUtil.getConnection;

@Slf4j
@Repository
public class BasketRepository {
    private final DataSource dataSource;

    public BasketRepository(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public void addBasket(Long itemId, Long memberId){
        String sql = "insert into Basket(member_id,item_id) values (?,?)";

        Connection con = null;
        PreparedStatement pstmt = null;
        try{
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,memberId);
            pstmt.setLong(2,itemId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(con,pstmt,null);
        }
    }

    public List<Item> findByMemberId(Long memberId){
        String sql = "select * from Item LEFT JOIN Basket ON Item.item_id = Basket.item_id where Basket.member_id = ?";
        List<Item> itemList = new ArrayList<>();

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,memberId);
            rs = pstmt.executeQuery();
            while (rs.next()){
                Item item = new Item(
                        rs.getLong("member_id"),
                        rs.getString("item_name"),
                        rs.getInt("item_price"),
                        rs.getInt("item_quantity"),
                        rs.getString("item_description"));
                item.setItemId(rs.getLong("item_id"));
                log.debug("itemRepo findByMemberId item={}",item);
                itemList.add(item);
                if (rs.isLast()){
                    log.debug("itemRepo findByMemberId itemList={}",itemList);
                    return itemList;
                }
            }
            throw new NoSuchFieldException();
        } catch (SQLException | NoSuchFieldException e) {
            if (e instanceof NoSuchFieldException){
                return null;
            }
            throw new RuntimeException(e);
        } finally {
            close(con,pstmt,rs);
        }
    }

    public void delete(Long itemId, Long memberId){
        String sql = "delete from basket where member_id=? and item_id=?;";
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,memberId);
            pstmt.setLong(2,itemId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(con, pstmt, null);
        }
    }














    private void createItem(){
        String sql = "  create table basket (\n" +
                "      basket_id bigint not null AUTO_INCREMENT,\n" +
                "      member_id bigint,\n" +
                "      item_id bigint,\n" +
                "      primary key (basket_id)\n" +
                "  );";
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(con,pstmt,null);
        }
    }
    private void dropItem(){
        String sql = "drop table basket if exists cascade;";
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(con,pstmt,null);
        }
    }
    private void alterItem(){
        String[] sqls = {"ALTER TABLE basket ADD FOREIGN KEY (member_id) REFERENCES member (member_id) ON UPDATE CASCADE;","ALTER TABLE basket ADD FOREIGN KEY (member_id) REFERENCES item (item_id) ON UPDATE CASCADE;"};
        Connection con = null;
        PreparedStatement pstmt = null;
        for (String sql : sqls) {
            try {
                con = getConnection();
                pstmt = con.prepareStatement(sql);
                pstmt.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            } finally {
                close(con,pstmt,null);
            }
        }
    }
    public void reset(){
        dropItem();
        createItem();
        alterItem();
    }




    private void close(Connection con, Statement stmt, ResultSet rs){
        JdbcUtils.closeResultSet(rs);
        JdbcUtils.closeStatement(stmt);

        DataSourceUtils.releaseConnection(con,dataSource);
    }

}
