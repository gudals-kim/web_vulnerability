package sec.web.controller.member;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import sec.web.controller.member.form.AddMemberForm;
import sec.web.controller.member.form.ChargeCashForm;
import sec.web.controller.member.form.FindMemberForm;
import sec.web.controller.member.form.PasswordSetForm;
import sec.web.domain.member.Member;
import sec.web.domain.member.MemberRepository;
import sec.web.service.MemberService;

import javax.validation.Valid;
@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/member")
public class MemberController {
    private final MemberRepository memberRepository;
    private final MemberService memberService;
    @GetMapping("/{memberId}")
    public String member(@PathVariable Long memberId, Model model){
        Member findMember = memberRepository.find(memberId);
        model.addAttribute("member",findMember);
        return "member/member";
    }

    @GetMapping("/{memberId}/edit")
    public String memberEdit(@PathVariable Long memberId,
                             Model model){
        Member member = memberRepository.find(memberId);
        AddMemberForm addMember = memberService.editMember(memberId, member);
        model.addAttribute("member",addMember);
        return "member/memberEdit";
    }



    @PostMapping("/{memberId}/edit")
    public String memberEdit(@PathVariable Long memberId,
            @Valid @ModelAttribute("member") AddMemberForm addMember, BindingResult bindingResult
    ){
        addMember.setId(memberId);
        if (bindingResult.hasErrors()){
            return "member/memberEdit";
        }
        if (memberService.isPasswordEqual(addMember)){
            memberService.changeMember(addMember, memberId);
            return "redirect:/member/{memberId}";
        }
        bindingResult.rejectValue("confirmPassword","confirmPassword","비밀번호가 같지 않습니다.");
        return "member/memberEdit";
    }


    @GetMapping("/find")
    public String memberFind(@ModelAttribute("findMember") FindMemberForm findMemberForm){
        return "member/memberFind";
    }
    @PostMapping("/find")
    public String memberFind(@Valid @ModelAttribute("findMember") FindMemberForm findMemberForm, BindingResult bindingResult, Model model){
        if (bindingResult.hasErrors()){
            return "member/memberFind";
        }
        Member member = memberRepository.find(findMemberForm.getEmail());
        if (member!=null && memberService.isMember(findMemberForm, member)){
            model.addAttribute("member",member);
            return "member/memberFindFlow";
        }
        bindingResult.rejectValue("email","emailError","해당 정보와 일치하는 회원 정보가 없습니다.");
        return "member/memberFind";
    }



    @GetMapping("/find/{memberId}")
    public String passwordSet(@PathVariable Long memberId, Model model,
                              @ModelAttribute("passwordForm") PasswordSetForm passwordForm){
        Member member = memberRepository.find(memberId);
        model.addAttribute("member",member);
        return "member/passwordSet";
    }
    @PostMapping("/find/{memberId}")
    public String passwordSet(
            @Valid @ModelAttribute("passwordForm") PasswordSetForm passwordForm, BindingResult bindingResult,
            @PathVariable Long memberId
    ){
        if (bindingResult.hasErrors()){
            return "member/passwordSet";
        }
        if (memberService.isPasswordEqual(passwordForm)){
            //인증 성공 로직
            memberService.passwordChange(passwordForm, memberId);
            return "member/passwordSetDone";
        }
        bindingResult.rejectValue("confirmPassword","confirmPassword","비밀번호가 같지 않습니다.");
        return "member/passwordSet";
    }




    @GetMapping("/charge/verify/{memberId}")
    public String chargeVerify(@ModelAttribute("findMember") FindMemberForm findMemberForm){
        return "member/charge/cashVerify";
    }
    @PostMapping("/charge/verify/{memberId}")
    public String chargeVerify(@Valid @ModelAttribute("findMember") FindMemberForm findMemberForm,
                               BindingResult bindingResult,
                               @PathVariable Long memberId,
                               Model model
                               ){
        if (bindingResult.hasErrors()){
            return "member/charge/cashVerify";
        }

        Member member = memberRepository.find(memberId);

        if (member!=null&&memberService.isMember(findMemberForm, member)){
            //성공로직
            model.addAttribute("member",member);
            return "member/charge/verifyDone";
        }
        //실패로직
        bindingResult.rejectValue("email","emailError","해당 정보와 일치하는 회원 정보가 없습니다.");
        return "member/charge/cashVerify";
    }
    @GetMapping("/charge/input/{memberId}")
    public String chargeInput(@ModelAttribute("inputMoney")ChargeCashForm cashForm,
                              @PathVariable Long memberId, Model model){
        Member member = memberRepository.find(memberId);
        model.addAttribute("member",member);
        return "member/charge/cashCharge";
    }
    @PostMapping("/charge/input/{memberId}")
    public String chargeInput(@Valid @ModelAttribute("inputMoney")ChargeCashForm cashForm, BindingResult bindingResult,
                              @PathVariable Long memberId, Model model){
        Member member = memberRepository.find(memberId);
        if (bindingResult.hasErrors()){
            model.addAttribute("member",member);
            return "member/charge/cashCharge";
        }
        Member updateMember = memberService.chargeCash(member, cashForm);
        memberRepository.updateMoney(updateMember);
        return "member/charge/chargeDone";
    }

}

