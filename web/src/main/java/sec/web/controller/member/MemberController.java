package sec.web.controller.member;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import sec.web.controller.member.form.AddMemberForm;
import sec.web.controller.member.form.FindMemberForm;
import sec.web.controller.member.form.PasswordSetForm;
import sec.web.domain.member.Member;
import sec.web.domain.member.MemberRepository;

import javax.validation.Valid;
@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/member")
public class MemberController {
    private final MemberRepository memberRepository;

    @GetMapping("/{memberId}")
    public String member(@PathVariable Long memberId, Model model){
        Member findMember = memberRepository.find(memberId);
        model.addAttribute("member",findMember);
        return "member/member";
    }

    @GetMapping("/{memberId}/edit")
    public String memberEdit(@PathVariable Long memberId,
                             Model model){
        Member member = memberRepository.find(memberId);
        AddMemberForm addMember = new AddMemberForm();
        addMember.setId(memberId);
        addMember.setName(member.getName());
        addMember.setEmail(member.getEmail());
        addMember.setPassword(member.getPassword());
        addMember.setMoney(member.getMoney());
        model.addAttribute("addMember",addMember);
        return "member/memberEdit";
    }
    @PostMapping("/{memberId}/edit")
    public String memberEdit(@PathVariable Long memberId,
            @Valid @ModelAttribute("addMember") AddMemberForm addMember, BindingResult bindingResult
    ){
        log.info("password=[{}]Confirm=[{}]",addMember.getPassword(),addMember.getConfirmPassword());
        if (!addMember.getPassword().equals(addMember.getConfirmPassword())){
            bindingResult.rejectValue("confirmPassword","confirmPassword","비밀번호가 같지 않습니다.");
        }
        if (bindingResult.hasErrors()){
            return "member/memberEdit";
        }
        log.debug("memberEdit member={}",addMember);
        Member member = memberRepository.find(memberId);
        member.setName(addMember.getName());
        member.setPassword(addMember.getPassword());
        memberRepository.update(member);
        return "redirect:/member/{memberId}";
    }

    @GetMapping("/find")
    public String memberFind(@ModelAttribute("findMember") FindMemberForm findMemberForm){
        return "member/memberFind";
    }
    @PostMapping("/find")
    public String memberFind(@Valid @ModelAttribute("findMember") FindMemberForm findMemberForm, BindingResult bindingResult, Model model){
        if (bindingResult.hasErrors()){
            return "member/memberFind";
        }
        Member member = memberRepository.find(findMemberForm.getEmail());
        if (member==null|!member.getName().equals(findMemberForm.getName())){
            bindingResult.rejectValue("email","emailError","해당 정보와 일치하는 회원 정보가 없습니다.");
            return "member/memberFind";
        }
        model.addAttribute("member",member);
        return "member/memberFindFlow";
    }
    @GetMapping("/find/{memberId}")
    public String passwordSet(@PathVariable Long memberId, Model model,
                              @ModelAttribute("passwordForm") PasswordSetForm passwordForm){
        Member member = memberRepository.find(memberId);
        model.addAttribute("member",member);
        return "member/passwordSet";
    }
    @PostMapping("/find/{memberId}")
    public String passwordSet(
            @Valid @ModelAttribute("passwordForm") PasswordSetForm passwordForm, BindingResult bindingResult,
            @PathVariable Long memberId
    ){
        if (bindingResult.hasErrors()){
            return "member/passwordSet";
        }
        if (!passwordForm.getPassword().equals(passwordForm.getConfirmPassword())){
            bindingResult.rejectValue("confirmPassword","confirmPassword","비밀번호가 같지 않습니다.");
            return "member/passwordSet";
        }

        Member member = memberRepository.find(memberId);
        member.setPassword(passwordForm.getPassword());
        memberRepository.update(member);
        return "member/passwordSetDone";
    }
}

