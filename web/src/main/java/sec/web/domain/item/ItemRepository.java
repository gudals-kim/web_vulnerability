package sec.web.domain.item;

import lombok.extern.slf4j.Slf4j;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static sec.web.dbconnection.DBConnectionUtil.getConnection;

@Slf4j
@Repository
public class ItemRepository {
    private final DataSource dataSource;

    public ItemRepository(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public void save(Item item){
        String sql = "insert into Item(member_id,item_name,item_price,item_quantity,item_description) values (?,?,?,?,?)";

        Connection con = null;
        PreparedStatement pstmt = null;
        try{
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,item.getMemberId());
            pstmt.setString(2,item.getName());
            pstmt.setInt(3,item.getPrice());
            pstmt.setInt(4,item.getQuantity());
            pstmt.setString(5,item.getDescription());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(con,pstmt,null);
        }
    }

    public Item find(Long itemId){
        String sql = "select * from item where item_Id = ?";

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,itemId);
            rs = pstmt.executeQuery();
            if (rs.next()){
                Item item = new Item(
                        rs.getLong("member_id"),
                        rs.getString("item_name"),
                        rs.getInt("item_price"),
                        rs.getInt("item_quantity"),
                        rs.getString("item_description"));
                item.setId(itemId);
                return item;
            }else {
                throw new NoSuchFieldException("item table not found itemId = "+ itemId);
            }
        } catch (SQLException | NoSuchFieldException e) {
            throw new RuntimeException(e);
        } finally {
            close(con,pstmt,rs);
        }

    }
    public List<Item> findAll() {
        String sql = "select * from item";
        List<Item> itemList = new ArrayList<>();
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                Item item = new Item(
                        rs.getLong("member_id"),
                        rs.getString("item_name"),
                        rs.getInt("item_price"),
                        rs.getInt("item_quantity"),
                        rs.getString("item_description"));
                item.setId(rs.getLong("member_id"));
                log.debug("itemRepo findAll item={}", item);
                itemList.add(item);
                if (rs.isLast()){
                    log.debug("itemRepo findAll itemList={}",itemList);
                    return itemList;
                }
            }
            throw new NoSuchFieldException();
        } catch (SQLException | NoSuchFieldException e) {
            if (e instanceof NoSuchFieldException){
                return null;
            }
            throw new RuntimeException(e);
        } finally {
            close(con, pstmt, rs);
        }
    }

    public List<Item> findByMemberId(Long memberId){
        String sql = "select * from item where member_id = ?";
        List<Item> itemList = new ArrayList<>();

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,memberId);
            rs = pstmt.executeQuery();
            while (rs.next()){
                Item item = new Item(
                        rs.getLong("member_id"),
                        rs.getString("item_name"),
                        rs.getInt("item_price"),
                        rs.getInt("item_quantity"),
                        rs.getString("item_description"));
                item.setId(rs.getLong("item_id"));
                log.debug("itemRepo findByMemberId item={}",item);
                itemList.add(item);
                if (rs.isLast()){
                    log.debug("itemRepo findByMemberId itemList={}",itemList);
                    return itemList;
                }
            }
            throw new NoSuchFieldException();
        } catch (SQLException | NoSuchFieldException e) {
            if (e instanceof NoSuchFieldException){
                return null;
            }
            throw new RuntimeException(e);
        } finally {
            close(con,pstmt,rs);
        }
    }
    public void delete(Long itemId){
        String sql = "delete from item where item_id=?";
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,itemId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(con, pstmt, null);
        }
    }
    public void deleteByMemberId(Long memberId){
        String sql = "delete from item where member_id=?";
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1,memberId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            close(con, pstmt, null);
        }
    }
//    public void update(){
//
//    }
    private void close(Connection con, Statement stmt, ResultSet rs){
        JdbcUtils.closeResultSet(rs);
        JdbcUtils.closeStatement(stmt);

        DataSourceUtils.releaseConnection(con,dataSource);
    }

}
