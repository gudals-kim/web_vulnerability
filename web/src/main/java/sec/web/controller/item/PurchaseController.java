package sec.web.controller.item;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import sec.web.controller.item.form.PurchaseForm;
import sec.web.domain.basket.BasketRepository;
import sec.web.domain.item.Item;
import sec.web.domain.item.ItemRepository;
import sec.web.domain.member.Member;
import sec.web.domain.member.MemberRepository;
import sec.web.domain.review.ReviewRepository;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/item/purchase")
public class PurchaseController {
    private final ItemRepository itemRepository;
    private final ReviewRepository reviewRepository;
    private final MemberRepository memberRepository;
    private final BasketRepository basketRepository;

    @GetMapping("/{memberId}/{itemId}")
    public String purchasePage(
            @ModelAttribute("purchaseForm") PurchaseForm purchaseForm,
            @PathVariable Long itemId,
            @PathVariable Long memberId,
            Model model
    ){
        Item item = itemRepository.find(itemId);
        List<Item> purchaseList = new ArrayList<>();
        purchaseList.add(item);
        model.addAttribute("purchaseList",purchaseList);

        String[] ids = new String[1];
        ids[0] = String.valueOf(itemId);
        purchaseForm.setPurchaseItemIds(ids);
        purchaseForm.setResultPrice(item.getPrice());
        return "/item/purchase";
    }

    @PostMapping("/{memberId}")
    public String purchase(
            @ModelAttribute("purchaseForm") PurchaseForm purchaseForm,
            BindingResult bindingResult,
            @PathVariable Long memberId
    ){
        Member member = memberRepository.find(memberId);
        String[] purchaseItemIds = purchaseForm.getPurchaseItemIds();
        if (purchaseItemIds==null){
            bindingResult.reject("purchaseItemIds","구매 아이템이 없습니다.");
        }
        if (purchaseForm.getResultPrice()>member.getMoney()){
            bindingResult.rejectValue("resultPrice","resultPrice","게임 머니가 부족합니다. 충전이 필요합니다.");
        }
        if (bindingResult.hasErrors()){
            return "/item/purchase";
        }


        //service
        for (String itemId : purchaseItemIds) {
            long id = Long.parseLong(itemId);
            Item item = itemRepository.find(id);
            if (item.getQuantity()==0){
                bindingResult.reject("noItem",null,"사려고 하는 물품 중에 재고가 없는 물건이 있습니다.");
                return "/item/purchase";
            }
            Member sellerMember = memberRepository.find(item.getSellerId());
            sellerMember.setMoney(sellerMember.getMoney()+item.getPrice());
            member.setMoney(member.getMoney()-item.getPrice());
            memberRepository.updateMoney(sellerMember);
            memberRepository.updateMoney(member);
            Integer salesRate = item.getSalesRate() + 1;
            int quantity = item.getQuantity() - 1;
            item.setQuantity(quantity);
            item.setSalesRate(salesRate);
            itemRepository.update(item);
            reviewRepository.addPurchaseList(item.getItemId(),memberId);
            basketRepository.delete(item.getItemId(),memberId);


        }
        return "redirect:/item/shoplist/{memberId}";

    }
}
