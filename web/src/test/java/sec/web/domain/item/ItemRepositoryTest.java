package sec.web.domain.item;

import com.zaxxer.hikari.HikariDataSource;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import sec.web.domain.member.Member;
import sec.web.domain.member.MemberRepository;

import java.util.List;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;
import static sec.web.dbconnection.ConnectionConst.*;

class ItemRepositoryTest {
    ItemRepository itemRepository;
    MemberRepository memberRepository;
    @AfterEach
    void afterEach(){
        itemRepository.reset();
        memberRepository.reset();
        Member testMember = new Member("test","test@test.com","!@#qweQWE");
        Member test2Member = new Member("test2","test2@test.com","!@#qweQWE");
        memberRepository.save(testMember);
        memberRepository.save(test2Member);
    }
    @BeforeEach
    void beforeEach(){
        HikariDataSource dataSource = new HikariDataSource();
        dataSource.setJdbcUrl(URL);
        dataSource.setUsername(USERNAME);
        dataSource.setPassword(PASSWORD);

        itemRepository = new ItemRepository(dataSource);
        memberRepository = new MemberRepository(dataSource);
    }
    @Test
    @DisplayName("CRUD TEST 성공테스트")
    void CRUD_TEST(){
        Member test1 = memberRepository.find("test@test.com");
        Member test2 = memberRepository.find("test2@test.com");
        Long TEST_1_ID = test1.getId();
        Long TEST_2_ID = test2.getId();
        Item itemTest = new Item(TEST_1_ID, "itemTest1", 150, 10, "item1 description 테스트 중입니다.");
        Item itemTest1 = new Item(TEST_2_ID, "itemTest2", 65150, 33, "item2 description 테스트 중입니다.");
        Item itemTest2 = new Item(TEST_2_ID, "itemTest3", 26250, 55, "item3 description 테스트 중입니다.");
        Item itemTest3 = new Item(TEST_2_ID, "itemTest4", 51650, 4, "item4 description 테스트 중입니다.");
        //save
        itemRepository.save(itemTest);
        itemRepository.save(itemTest1);
        itemRepository.save(itemTest2);
        itemRepository.save(itemTest3);
        //find
        System.out.println("findTest Start");
        Item findItem = itemRepository.find(1L);
        assertThat(findItem.getDescription()).isEqualTo(itemTest.getDescription());
        System.out.println("findTest end");

        //update
        System.out.println("updateTest Start");
        Item findItem2 = itemRepository.find(2L);
        findItem2.setName("변경");
        findItem2.setPrice(4000);
        findItem2.setQuantity(20);
        findItem2.setDescription("설명을 변경했습니다.");
        itemRepository.update(findItem2);
        Item updateItem = itemRepository.find(2L);
        assertThat(updateItem.getName()).isEqualTo("변경");
        assertThat(updateItem.getPrice()).isEqualTo(4000);
        assertThat(updateItem.getQuantity()).isEqualTo(20);
        assertThat(updateItem.getDescription()).isEqualTo("설명을 변경했습니다.");
        System.out.println("updateTest end");

        //find all
        System.out.println("findAllTest Start");
        List<Item> itemList = itemRepository.findAll();
        assertThat(itemList.size()).isEqualTo(4);
        System.out.println("findAllTest end");

        //findByMemberId
        System.out.println("findByMemberIdTest Start");
        List<Item> itemByMemberList = itemRepository.findByMemberId(TEST_2_ID);
        assertThat(itemByMemberList.size()).isEqualTo(3);
        assertThat(itemByMemberList).contains(findItem2);
        System.out.println("findByMemberIdTest end");

        //delete
        System.out.println("deleteTest Start");
        itemRepository.delete(1L);
        itemList = itemRepository.findAll();
        assertThat(itemList.size()).isEqualTo(3);
        assertThat(itemList).doesNotContain(findItem);
        System.out.println("deleteTest end");

        //deleteByMemberId
        System.out.println("deleteByMemberIdTest Start");
        itemRepository.deleteByMemberId(TEST_2_ID);
        itemByMemberList = itemRepository.findByMemberId(TEST_2_ID);
        List<Item> findAllList = itemRepository.findAll();
        assertThat(itemByMemberList).isNull();
        assertThat(findAllList).isNull();
        System.out.println("deleteByMemberIdTest end");


    }

}